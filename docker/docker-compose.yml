version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: battinsight-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-battinsight}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - battinsight-network

  # Backend Flask Application
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: battinsight-backend
    environment:
      DATABASE_URI: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-battinsight}
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_DEBUG: ${FLASK_DEBUG:-0}
      SECRET_KEY: ${SECRET_KEY:-default_secret_key_change_in_production}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN:-}
    volumes:
      - ../data:/app/data
      - ../backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - battinsight-network

  # Frontend React Application
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: battinsight-frontend
    volumes:
      - ../docker/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    ports:
      - "8080:80"
    restart: unless-stopped
    networks:
      - battinsight-network

networks:
  battinsight-network:
    driver: bridge

volumes:
  postgres_data:
